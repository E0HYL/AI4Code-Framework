#!/usr/bin/env python
# -*- encoding: utf-8 -*-
'''
@File    :   opcode_cnn.py
@Time    :   2021/10/02 18:44:19
@Author  :   Yiling He
@Version :   1.0
@Contact :   heyilinge0@gmail.com
@License :   (C)Copyright 2021
@Desc    :   None
'''

# here put the import lib
from ai4code.features.preprocessing.android import APKAnalyzer
from ai4code.features.resources import get_resource
from ai4code.features.normalization import get_existence_vector
import numpy as np


OPCODES = get_resource('samli_opcodes')

class OpcodeSeqAnalyzer(APKAnalyzer):
    def __init__(self, apkpath, ana_obj=None):
        super(OpcodeSeqAnalyzer, self).__init__(apkpath, ana_obj=ana_obj)
        self.opcode_sequence = self.get_opcode_sequence()
        self.features = self.get_features()

    def get_opcode_sequence(self):
        mxs = self.get_mxs()
        opcode_sequence = []
        for user_mx in mxs['userdefi']:
            opcode_sequence += self.get_method_tokens(user_mx)
        return opcode_sequence

    def get_features(self):
        # Let X = {x1...xn} be a sequence of opcode instructions encoded as one-hot vectors, where xn is the one-hot vector for the nâ€™th opcode in the sequence.
        feature_list = []
        for opcode in self.opcode_sequence:
            feature_list.append(get_existence_vector([opcode], OPCODES))
        return np.array(feature_list)