#!/usr/bin/env python
# -*- encoding: utf-8 -*-
'''
@File    :   drebin.py
@Time    :   2021/10/03 14:28:54
@Author  :   Yiling He
@Version :   1.0
@Contact :   heyilinge0@gmail.com
@License :   (C)Copyright 2021
@Desc    :   None
'''

# here put the import lib
from ai4code.features.preprocessing.android import APKAnalyzer
from ai4code.features.resources import get_resource
from ai4code.features.normalization import get_existence_vector, concatenate_numpy_array


PERMISSIONS = get_resource('android_permissions')
RESTRICTED_APIS = get_resource('restricted_apis')
# https://github.com/MLDroid/drebin/blob/master/src/Modules/BasicBlockAttrBuilder.py
AndroidSuspiciousApiNameList = ["getExternalStorageDirectory", "getSimCountryIso", "execHttpRequest", 
            "sendTextMessage", "getSubscriberId", "getDeviceId", "getPackageInfo", "getSystemService", "getWifiState", 
            "setWifiEnabled", "setWifiDisabled", "Cipher"]
OtherSuspiciousApiNameList = ["Ljava/net/HttpURLconnection;->setRequestMethod(Ljava/lang/String;)", "Ljava/net/HttpURLconnection", 
                                "Lorg/apache/http/client/methods/HttpPost", "Landroid/telephony/SmsMessage;->getMessageBody", 
                                "Ljava/io/IOException;->printStackTrace", "Ljava/lang/Runtime;->exec"]


class DrebinAnalyzer(APKAnalyzer):
    def __init__(self, apkpath, ana_obj=None, informative=True, dex_only=True):
        super(DrebinAnalyzer, self).__init__(apkpath, ana_obj=ana_obj)
        self.informative = informative
        self.dex_only = dex_only
        api_mx, other_api_mx, user_mx = self._get_api_methods()
        
        self.restricted_apis, self.used_permissions = self.parse_used_permissions() # S5, S6
        self.suspicious_apis = self.get_suspicious_api(api_mx, other_api_mx) # S7
        if not dex_only:
            self.declared_permissions = set(self.get_declared_permissions()) # S2        
        if not informative:
            #  We build a condensed subset of features by removing those features that are raw strings appearing in particular apps. In particular, we removed the `url`s, and `component name`s from the total feature set.
            #  https://dl.acm.org/doi/pdf/10.1145/2818000.2818038
            self.activity, self.service, self.receiver, self.provider, self.hardware, self.intent_filter = self.parse_manifest() # S1, S3
            self.urldomain = self.parse_bytecode_url(user_mx) # S8
        if informative and dex_only:
            self.features = self.get_features()

    def parse_manifest(self):
        components = list()
        for key in ['activity', 'service', 'receiver', 'provider', 'hardware']:
            components.append(set(self.get_xml_components(key=key)))
        components.append(set(self.get_all_intent_filters()))
        return components

    def parse_used_permissions(self):
        restricted_apis = set()
        used_permissions = []
        for mx, per_list in self.get_used_permissions():
            name0, name1 = str(mx.full_name).split('(')
            name0 = name0.replace(' ', '-')
            name = name0 + '(' + name1
            restricted_apis.add(name)
            used_permissions += per_list
        return restricted_apis, set(used_permissions)

    def parse_bytecode_url(self, user_mx):
        import re
        urldomains = set()
        for mx in user_mx:
            for basic_block in mx.basic_blocks:
                for instruction in basic_block.get_instructions():
                    codeline = str(instruction.get_name()+" "+instruction.get_output())
                    URLSearch = re.search("https?://([\da-z\.-]+\.[a-z\.]{2, 6}|[\d.]+)[^'\"]*", codeline, re.IGNORECASE)
                if URLSearch:
                    url = URLSearch.group()
                    domain = re.sub("https?://(.*)", "\g<1>",
                                    re.search("https?://([^/:\\\\]*)", url, re.IGNORECASE).group(), 0, re.IGNORECASE)
                    urldomains.add(domain)
        return urldomains

    def get_suspicious_api(self, api_mx, other_api_mx, andro_suspicious_api=AndroidSuspiciousApiNameList, other_suspicious_api=OtherSuspiciousApiNameList):
        # def updateAinB(A_mx, B, ori_set):
        #     for api in A_mx:
        #         api = str(api.full_name)
        #         for reference in B:
        #             if reference in api:
        #                 ori_set.add(api)

        suspicious_apis = set()
        # updateAinB(api_mx, andro_suspicious_api, suspicious_apis)
        # updateAinB(other_api_mx, other_suspicious_api, suspicious_apis)
        for api in api_mx:
            api = str(api.name)
            for reference in andro_suspicious_api:
                if reference == api:
                    suspicious_apis.add(api)

        for api in other_api_mx:
            api = str(api).strip('<analysis.MethodAnalysis ').strip(';>')
            for reference in other_suspicious_api:
                if reference == api:
                    suspicious_apis.add(api)

        return suspicious_apis
    
    def _get_api_methods(self):
        api_dict = self.get_mxs()
        andro_ = api_dict.get('androapi')
        other_ = api_dict.get('external')
        user_ = api_dict.get('userdefi')
        return andro_, other_, user_

    def get_features(self):
        restricted_apis_vector = get_existence_vector(self.restricted_apis, RESTRICTED_APIS)
        used_permissions_vector = get_existence_vector(self.used_permissions, PERMISSIONS)
        SuspiciousApiNameList = AndroidSuspiciousApiNameList + OtherSuspiciousApiNameList
        suspicious_apis_vector = get_existence_vector(self.suspicious_apis, SuspiciousApiNameList)
        # print(len(restricted_apis_vector), len(used_permissions_vector), len(suspicious_apis_vector))
        features = [restricted_apis_vector, used_permissions_vector, suspicious_apis_vector] # 3810 + 231 + 18
        features = concatenate_numpy_array(features)
        if not self.dex_only or not self.informative: 
            raise NotImplementedError
        return features
        


